package com.curso.configuracion;

import org.springframework.aop.Pointcut;
import org.springframework.aop.framework.ProxyFactoryBean;
import org.springframework.aop.support.DefaultPointcutAdvisor;
import org.springframework.aop.support.JdkRegexpMethodPointcut;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

import com.curso.modelo.negocio.GestorClientes;
import com.curso.modelo.negocio.GestorClientesImpl;
import com.curso.modelo.negocio.aop.CronometroAdvice;
import com.curso.modelo.negocio.aop.LogAdvice;
import com.curso.util.Logger;

@Configuration
@ComponentScan({"com.curso.modelo.negocio", "com.curso.modelo.negocio.aop", "com.curso.util"})
public class Configuracion {
	
	@Bean
	Logger logger() {
		Logger logger = new Logger();
		logger.setNombreFichero("logs/log.txt");
		return logger;
	}

	@Bean
	Logger loggerCronometro() {
		Logger logger = new Logger();
		logger.setNombreFichero("logs/logCronometro.txt");
		return logger;
	}	
	
	//ADVICE: Sabe QUÉ hay que hacer. No sabe ni cuándo hay que hacelo ni quién es el target.
	//Estas clases guardan el código del cual hemos sacado factor común 
	//LogAdvice y CronometroAdvice están registrados como @Component	
	
}


/*
class ServicioClientes_PROXY implements GestorClientes {

	private GestorClientesImpl target;
	
	private LogAdvice logAdvice;
	
	public void setTarget(GestorClientesImpl target) {
		this.target = target;
	}

	@Override
	public void insertar(Cliente cliente) {
		logAdvice.before(null, null, cliente);
		target.insertar(cliente);
		logAdvice.afterReturning(cliente, null, null, cliente);
	}

	@Override
	public void borrar(Cliente cliente) {
		//logAdvice.before(null, null, cliente);
		target.borrar(cliente);
		logAdvice.afterReturning(cliente, null, null, cliente);
	}
	
}
*/







