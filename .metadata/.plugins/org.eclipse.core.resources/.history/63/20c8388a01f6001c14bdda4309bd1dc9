package com.curso.modelo.negocio.aop;

import org.aopalliance.intercept.MethodInterceptor;
import org.springframework.stereotype.Component;

@Component
public class CronometroAdvice implements MethodInterceptor {

	
}

/*
//Si programamos el CronometroAdvice con las interfaces MethodBeforeAdvice y AfterReturningAdvice descubrimos que no es thread safe
 *y que debemos esmerarnos un poquito m√°s...
 
@Component
public class CronometroAdvice implements MethodBeforeAdvice, AfterReturningAdvice {

	@Autowired
	private Logger logger;
	
	private Map<String, Long> horasLlegada = new HashMap<>();
	
	//Esto no es 'thread safe'
	//private long inicio;
	
	@Override
	public void before(Method method, Object[] args, Object target) throws Throwable {		
		horasLlegada.put(Thread.currentThread().getName(), System.currentTimeMillis());
		//Esto no es 'thread save'
		//inicio = System.currentTimeMillis();
	}

	@Override
	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {
		long inicio = horasLlegada.get(Thread.currentThread().getName());
		long fin = System.currentTimeMillis();		
		logger.escribir("Llamada al metodo "+method.getName()+" de "+target.getClass()+" procesada en "+(fin-inicio)+" milisegundos. "+LocalDateTime.now());
		System.out.println("Llamada al metodo "+method.getName()+" de "+target.getClass()+" procesada en "+(fin-inicio)+" milisegundos. "+LocalDateTime.now());
		horasLlegada.remove(Thread.currentThread().getName());
	}

}
*/
